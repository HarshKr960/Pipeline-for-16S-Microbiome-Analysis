# Load required libraries once
library(dada2)
library(tidyr)
library(ggplot2)
library(tidyverse)
library(mecodev)
library(phyloseq)
library(microeco)
library(MiscMetabar)
library(file2meco)
library(dplyr)
library(ampvis2)

#------------------------------
# Input files
#------------------------------
path <- "D:/work/OmicsLogic_Workshop/OmisLogic_16s_datasets/"
fnFs <- sort(list.files(path, pattern="_R1_001.fastq.gz", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2_001.fastq.gz", full.names = TRUE))
sample.names <- sapply(strsplit(basename(fnFs), "_"), '[', 1)

#------------------------------
# Quality profile
#------------------------------
plotQualityProfile(fnFs[1:2])
plotQualityProfile(fnRs[1:2])

#------------------------------
# Filter and trim
#------------------------------
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
names(filtFs) <- sample.names
names(filtRs) <- sample.names

out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs,
              truncLen=c(270,220),
              maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
              compress=TRUE, multithread=FALSE) 

#------------------------------
# Learn error rates
#------------------------------
errF <- learnErrors(filtFs, multithread=TRUE)
errR <- learnErrors(filtRs, multithread=TRUE)
plotErrors(errF, nominalQ=TRUE)

#------------------------------
# Sample inference
#------------------------------
dadaFs <- dada(filtFs, err=errF, multithread=TRUE)
dadaRs <- dada(filtRs, err=errR, multithread=TRUE)

#------------------------------
# Merge paired reads
#------------------------------
mergers <- mergePairs(dadaFs, filtFs, dadaRs, filtRs, verbose=TRUE)

#------------------------------
# ASV table
#------------------------------
seqtab <- makeSequenceTable(mergers)

# Remove chimeras
seqtab.nochim <- removeBimeraDenovo(seqtab, method="consensus", multithread=TRUE,
                                    verbose=TRUE, minFoldParentOverAbundance=8)

#------------------------------
# Taxonomy assignment
#------------------------------
taxa <- assignTaxonomy(seqtab.nochim,
            "GTDB_bac120_arc53_ssu_r220_fullTaxo.fa.gz", multithread=TRUE)

#------------------------------
# Build phyloseq object
#------------------------------
meta <- read.csv("metadata.csv", header=TRUE, row.names=1)
ps <- phyloseq(otu_table(seqtab.nochim, taxa_are_rows=FALSE),
               sample_data(meta),
               tax_table(taxa))

#------------------------------
# Track reads
#------------------------------
getN <- function(x) sum(getUniques(x))
track <- cbind(out, 
               sapply(dadaFs, getN),
               sapply(dadaRs, getN),
               sapply(mergers, getN),
               rowSums(seqtab.nochim))
colnames(track) <- c("input", "filtered", "denoisedF", "denoisedR", "merged", "nonchim")
rownames(track) <- sample.names
write.csv(track,"denoising_stats.csv")

#------------------------------
# Example visualizations
#------------------------------

# Kingdom
ps_kingdom <- tax_glom(ps, taxrank="Kingdom")
ps_rel <- transform_sample_counts(ps_kingdom, function(x) x/sum(x))
plot_bar(ps_rel, fill = "Kingdom") + theme_classic()

# Phylum
ps_phylum <- tax_glom(ps, taxrank="Phylum")
ps_rel <- transform_sample_counts(ps_phylum, function(x) x/sum(x))
plot_bar(ps_rel, fill = "Phylum") + theme_classic()

# Top 20 Genus (microeco)
meco <- phyloseq2meco(ps)
t1 <- trans_abund$new(dataset = meco, taxrank = "Genus", ntaxa = 20)
t1$plot_bar()

# Alpha diversity
t1 <- trans_alpha$new(dataset = meco, group = "Group")
t1$plot_alpha(measure = "Shannon")

# Beta diversity
meco$cal_betadiv()
t2 <- trans_beta$new(dataset = meco, group = "Group", measure = "bray")
t2$cal_ordination()
t2$plot_ordination(plot_color = "Group")

# Export ASV table
write.table(ps %>% transform_sample_counts(function(x) x/sum(x)) %>% 
  psmelt() %>% arrange(OTU) %>% rename(ASV = OTU) %>% 
  select(ASV, Kingdom, Phylum, Class, Order, Family, Genus, Species, Sample, Abundance) %>%
  spread(Sample, Abundance), 
  file = "ps.relative_abundance.all.tsv", sep = "\t", quote = F, row.names = F, col.names = T)
